{"version":3,"sources":["firebase.js","Chat.jsx","Messages.jsx","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Chat","useState","message","setMessage","author","setAuthor","error","setError","className","htmlFor","type","value","onChange","e","target","el","length","text","onClick","messageRef","database","ref","push","sendMessage","Messages","messages","map","item","index","toString","App","setMessages","useEffect","on","snapshot","values","val","messList","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAaAA,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oEACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,QAAf,E,eCZe,SAASU,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KA0BA,OACE,uBAAMC,UAAU,eAAhB,UACE,uBAAOA,UAAU,oBAAoBC,QAAQ,GAA7C,uBACA,sBAAKD,UAAU,aAAf,UACE,uBAAOE,KAAK,OAAOC,MAAOP,EAAQQ,SAAU,SAAAC,GAAC,OAAIR,EAAUQ,EAAEC,OAAOH,UACnEL,GAASA,EAAMS,GAAGC,OAAS,GAAkB,WAAbV,EAAMS,GAAkB,qBAAKP,UAAU,QAAf,SAAwBF,EAAMW,OAAmB,MAE5G,uBAAOT,UAAU,oBAAoBC,QAAQ,GAA7C,yBACA,sBAAKD,UAAU,aAAf,UACE,0BAAUE,KAAK,OAAOC,MAAOT,EAASU,SAAU,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,OAAOH,UACxEL,GAASA,EAAMS,GAAGC,OAAS,GAAkB,YAAbV,EAAMS,GAAmB,qBAAKP,UAAU,QAAf,SAAwBF,EAAMW,OAAmB,MAE3G,wBAAQT,UAAU,qBAAqBE,KAAK,SAASQ,QAAS,SAAAL,IApChD,WAClB,IAAMM,EAAa7B,EAAS8B,WAAWC,IAAI,YAErCJ,EAAO,CACXf,UACAE,UAGCF,EAAQc,OAAS,EACfZ,EAAOY,OAAS,GACjBG,EAAWG,KAAKL,GAChBd,EAAW,IACXE,EAAU,IACVE,EAAS,KAETA,EAAS,CAACU,KAAM,0BAA2BF,GAAI,WAIjDR,EAAS,CAACU,KAAM,0BAA2BF,GAAI,YAiBuBQ,IAApE,6BC3CO,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SACjC,OACE,qBAAKjB,UAAU,WAAf,SACGiB,EAASC,KAAI,SAACC,EAAMC,GAAP,OACZ,sBAAKpB,UAAU,UAAf,UACE,sBAAKA,UAAU,kBAAf,mBAAwCmB,EAAKvB,UAC7C,qBAAKI,UAAU,gBAAf,SAAgCmB,EAAKzB,YAFT0B,EAAMC,iBCuB7BC,MAtBf,WACE,MAAgC7B,mBAAS,IAAzC,mBAAOwB,EAAP,KAAiBM,EAAjB,KAYA,OAXAC,qBAAU,WACY1C,EAAS8B,WAAWC,IAAI,YAChCY,GAAG,SAAS,SAACC,GACvB,IAAMC,EAASD,EAASE,MAClBC,EAAW,GACjB,IAAK,IAAIC,KAAMH,EACbE,EAASf,KAAKa,EAAOG,IAEvBP,EAAYM,QAEb,IAED,sBAAK7B,UAAU,MAAf,UACE,cAACgB,EAAD,CAAUC,SAAUA,IACpB,cAACzB,EAAD,QCXSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.654ac60f.chunk.js","sourcesContent":["import firebase from 'firebase/app'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLt8azOW8jAl21zcewtd-IZpsTSvZmQD4\",\n  authDomain: \"test-a204f.firebaseapp.com\",\n  databaseURL: \"https://test-a204f-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"test-a204f\",\n  storageBucket: \"test-a204f.appspot.com\",\n  messagingSenderId: \"762800053556\",\n  appId: \"1:762800053556:web:4fe95a1074e6f855e25961\",\n  measurementId: \"G-YYZVL9NRVD\"\n}\n\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase","import React, { useState } from 'react'\nimport firebase from './firebase'\nimport 'firebase/database';\n\nexport default function Chat() {\n  const [message, setMessage] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [error, setError] = useState('');\n\n  const sendMessage = () => {\n    const messageRef = firebase.database().ref(\"Messages\");\n\n    const text = {\n      message,\n      author\n    }\n\n    if(message.length > 0){\n      if(author.length > 0){\n        messageRef.push(text)\n        setMessage(\"\");\n        setAuthor(\"\");\n        setError('');\n      } else {\n        setError({text: 'Field Must be not empty', el: 'author'})\n      }\n\n    } else {\n      setError({text: 'Field Must be not empty', el: 'message'})\n    }\n\n\n  }\n  return (\n    <form className='message-form'>\n      <label className='text-field__label' htmlFor=\"\">Your name</label>\n      <div className='text-field'>\n        <input type=\"text\" value={author} onChange={e => setAuthor(e.target.value)}/>\n        {error && error.el.length > 0 ?  error.el === 'author' ? <div className='error'>{error.text}</div> : '' : ''}\n      </div>\n      <label className='text-field__label' htmlFor=\"\">Add message</label>\n      <div className='text-field'>\n        <textarea type=\"text\" value={message} onChange={e => setMessage(e.target.value)}/>\n        {error && error.el.length > 0 ?  error.el === 'message' ? <div className='error'>{error.text}</div> : '' : ''}\n      </div>\n        <button className='text-filed__button' type=\"button\" onClick={e => {sendMessage()}}>Send Message</button>\n    </form>\n  )\n}\n","import React from 'react'\n\nexport default function Messages({ messages }) {\n  return (\n    <div className=\"messages\">\n      {messages.map((item, index) => (\n        <div className='message' key={index.toString()}>\n          <div className='message__author'>from: {item.author}</div>\n          <div className='message__text'>{item.message}</div>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import './App.css';\nimport Chat from './Chat';\nimport { useEffect, useState } from 'react';\nimport firebase from './firebase';\nimport 'firebase/database';\nimport Messages from './Messages';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const messagesRef = firebase.database().ref('Messages');\n    messagesRef.on('value', (snapshot) => {\n      const values = snapshot.val()\n      const messList = [];\n      for (let id in values) {\n        messList.push(values[id])\n      }\n      setMessages(messList)\n    })\n  }, [])\n  return (\n    <div className=\"App\">\n      <Messages messages={messages}/>\n      <Chat />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}